(define (entry tree) 
    (if (pair? tree)
        (car tree)
        tree))
(define (left-branch tree) 
    (if (and (pair? tree) (pair? (cdr tree)))
        (cadr tree)
        '()))
(define (right-branch tree) 
    (if (and (pair? tree) (pair? (cdr tree)) (pair? (cddr tree)))
        (caddr tree)
        '()))
(define (make-tree entry left right)
    (list entry left right))

(define (tree->list-1 tree)
    (if (null? tree)
        '()
        (append (tree->list-1 (left-branch tree))
            (cons (entry tree)
                (tree->list-1 (right-branch tree))))))

(define (tree->list-2 tree)
    (define (copy-to-list tree result-list)
        (if (null? tree)
            result-list
            (copy-to-list (left-branch tree)
                (cons (entry tree)
                    (copy-to-list (right-branch tree)
                        result-list)))))
    (copy-to-list tree '()))


(define tree1 '(100 (1 (3 5 7) (9 11 13)) (2 (4 6 8) (10 12 14))))
(define tree2 (make-tree 200 tree1 tree1))
(define tree3 (make-tree 300 tree2 tree2))
(define tree4 (make-tree 400 tree3 tree3))