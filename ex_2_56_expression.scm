(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (=number? exp num)
    (and (number? exp) (= exp num)))

(define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (make-exponentiation b e)
    (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        (else (list '^ b e))))

(define (exp? sym)
    (lambda (s) 
        (and (pair? s) (eq? (car s) sym))))
(define first-var cadr)
(define (second-var sym)
    (lambda (s) 
        (let ((sec (cddr s)))
            (if (= (length sec) 1)
                (car sec)
                (cons sym sec)))))
(define sum? (exp? '+))
(define addend first-var)
(define augend (second-var '+))

(define product? (exp? '*))
(define multiplier first-var)
(define multiplicand (second-var '*))

(define exponentiation? (exp? '^))
(define base first-var)
(define exponent (second-var '^))