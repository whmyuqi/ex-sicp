(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
    (and (number? exp) (= exp num)))

(define (deriv exp var)
    (cond ((number? exp) 0)
        ((variable? exp) 
            (if (same-variable? exp var) 1 0))
        (exp-deriv-wrap exp var deriv)))
(define (exp-deriv-wrap exp var deriv)
    ((get 'exp-deriv (operator exp)) exp var deriv))
; 
(define operator car)
(define (install-sum-package)
    (define tag '+)
    (define (make-sum a1 a2)
        (cond ((=number? a1 0) a2)
            ((=number? a2 0) a1)
            ((and (number? a1) (number? a2)) (+ a1 a2))
            (else (list tag a1 a2))))
    (define addend cadr)
    (define (augend exp) 
        (let ((sec (cddr exp)))
            (if (= (length sec) 1)
                (car sec)
                (cons tag sec))))
    (define (exp-deriv exp var deriv)
        (make-sum (deriv (addend exp) var)
            (deriv (augend exp) var)))
    (put 'exp-deriv tag exp-deriv)
    "install sum package done")

(install-sum-package)
